-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.admin
(
    adminid serial NOT NULL,
    admin_level character varying(50) COLLATE pg_catalog."default" NOT NULL,
    permissions text[] COLLATE pg_catalog."default" NOT NULL,
    assigned_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    userid integer NOT NULL,
    CONSTRAINT admin_pkey PRIMARY KEY (adminid)
);

CREATE TABLE IF NOT EXISTS public.anime
(
    animeid serial NOT NULL,
    english_title character varying(150) COLLATE pg_catalog."default",
    japanese_title character varying(150) COLLATE pg_catalog."default",
    anime_synopsis text COLLATE pg_catalog."default",
    broadcast_date_time character varying(150) COLLATE pg_catalog."default",
    release_date date,
    end_date date,
    related_anime character varying(100)[] COLLATE pg_catalog."default",
    seasons integer,
    episodes integer,
    sources_anime_analysis character varying(255) COLLATE pg_catalog."default",
    sources_anime_stream_services character varying(255) COLLATE pg_catalog."default",
    anime_image character varying(255) COLLATE pg_catalog."default",
    animemangatypeid integer,
    animemangastatusid integer,
    animelanguageoptionsid integer,
    animemangaorigincountryid integer,
    premieredseasonyearid integer,
    CONSTRAINT anime_pkey PRIMARY KEY (animeid)
);

CREATE TABLE IF NOT EXISTS public.anime_character
(
    animeid integer NOT NULL,
    characterid integer NOT NULL,
    CONSTRAINT anime_character_pkey PRIMARY KEY (animeid, characterid)
);

CREATE TABLE IF NOT EXISTS public.anime_contributor_type
(
    animecontributortypeid serial NOT NULL,
    animeid integer,
    anime_contributor_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    type_label character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT anime_contributor_type_pkey PRIMARY KEY (animecontributortypeid)
);

CREATE TABLE IF NOT EXISTS public.anime_genre
(
    animeid integer NOT NULL,
    genreid integer NOT NULL,
    CONSTRAINT anime_genre_pkey PRIMARY KEY (animeid, genreid)
);

CREATE TABLE IF NOT EXISTS public.anime_language_option
(
    animeid integer NOT NULL,
    languageoptionid integer NOT NULL,
    CONSTRAINT anime_language_option_pkey PRIMARY KEY (animeid, languageoptionid)
);

CREATE TABLE IF NOT EXISTS public.anime_manga_association
(
    animeid integer NOT NULL,
    mangaid integer NOT NULL,
    relationship_type character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT anime_manga_association_pkey PRIMARY KEY (animeid, mangaid)
);

CREATE TABLE IF NOT EXISTS public.anime_manga_origin_country
(
    animemangaorigincountryid serial NOT NULL,
    country_code character(2) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT anime_manga_origin_country_pkey PRIMARY KEY (animemangaorigincountryid)
);

CREATE TABLE IF NOT EXISTS public.anime_manga_status
(
    animemangastatusid integer NOT NULL DEFAULT nextval('animemangastatus_table_animemangastatusid_seq'::regclass),
    status_label anime_manga_status_enum NOT NULL,
    CONSTRAINT animemangastatus_table_pkey PRIMARY KEY (animemangastatusid)
);

CREATE TABLE IF NOT EXISTS public.anime_manga_type
(
    animemangatypeid serial NOT NULL,
    type_label anime_manga_type_enum NOT NULL,
    CONSTRAINT anime_manga_type_pkey PRIMARY KEY (animemangatypeid)
);

CREATE TABLE IF NOT EXISTS public.anime_rating_review
(
    animeratingid serial NOT NULL,
    userid integer NOT NULL,
    animeid integer NOT NULL,
    rating_score integer NOT NULL,
    rating_date date DEFAULT CURRENT_DATE,
    review text COLLATE pg_catalog."default",
    CONSTRAINT anime_rating_review_pkey PRIMARY KEY (animeratingid)
);

CREATE TABLE IF NOT EXISTS public.anime_revision_history_table
(
    animerevisionhistorytableid serial NOT NULL,
    userid integer NOT NULL,
    animeid integer NOT NULL,
    updated_field character varying(100) COLLATE pg_catalog."default" NOT NULL,
    change_description character varying(255) COLLATE pg_catalog."default",
    change_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    old_value character varying(255) COLLATE pg_catalog."default",
    new_value character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT anime_revision_history_table_pkey PRIMARY KEY (animerevisionhistorytableid)
);

CREATE TABLE IF NOT EXISTS public.anime_tags
(
    animeid integer NOT NULL,
    tagid integer NOT NULL,
    CONSTRAINT anime_tag_pkey PRIMARY KEY (animeid, tagid)
);

CREATE TABLE IF NOT EXISTS public.chapter
(
    chapterid serial NOT NULL,
    mangaid integer NOT NULL,
    volume_number integer,
    chapter_number integer NOT NULL,
    chapter_title character varying(255) COLLATE pg_catalog."default",
    chapter_synopsis text COLLATE pg_catalog."default",
    CONSTRAINT chapter_pkey PRIMARY KEY (chapterid)
);

CREATE TABLE IF NOT EXISTS public."character"
(
    characterid serial NOT NULL,
    character_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    character_genre character(1) COLLATE pg_catalog."default" NOT NULL,
    role character varying(50) COLLATE pg_catalog."default",
    character_synopsis text COLLATE pg_catalog."default",
    personality character varying(255) COLLATE pg_catalog."default",
    character_image character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT character_pkey PRIMARY KEY (characterid)
);

CREATE TABLE IF NOT EXISTS public.database_activity_logs
(
    activitylogsid serial NOT NULL,
    adminid integer,
    operation_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    entity_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT database_activity_logs_pkey PRIMARY KEY (activitylogsid)
);

CREATE TABLE IF NOT EXISTS public.episode
(
    episodeid serial NOT NULL,
    seasonid integer NOT NULL,
    arc_name character varying(100) COLLATE pg_catalog."default",
    episode_number integer NOT NULL,
    episode_title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    episode_synopsis text COLLATE pg_catalog."default",
    duration interval,
    airing date,
    CONSTRAINT episode_pkey PRIMARY KEY (episodeid)
);

CREATE TABLE IF NOT EXISTS public.genre
(
    genreid serial NOT NULL,
    genre_name character varying(40) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT genre_pkey PRIMARY KEY (genreid)
);

CREATE TABLE IF NOT EXISTS public.language_option
(
    languageoptionid integer NOT NULL DEFAULT nextval('anime_language_options_languageoptionsid_seq'::regclass),
    language_label character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT animelanguageoptionsid PRIMARY KEY (languageoptionid)
);

CREATE TABLE IF NOT EXISTS public.manga
(
    mangaid serial NOT NULL,
    english_title character varying(150) COLLATE pg_catalog."default",
    japanese_title character varying(150) COLLATE pg_catalog."default",
    manga_synopsis text COLLATE pg_catalog."default",
    volumes integer,
    publish_start_date date,
    publish_end_date date,
    serialized boolean,
    manga_image character varying(255) COLLATE pg_catalog."default",
    sources_manga_analysis character varying(255) COLLATE pg_catalog."default",
    sources_manga_read character varying(255) COLLATE pg_catalog."default",
    releasescheduleid integer,
    animemangatypeid integer,
    animemangastatusid integer,
    animemangaorigincountryid integer,
    CONSTRAINT manga_pkey PRIMARY KEY (mangaid)
);

CREATE TABLE IF NOT EXISTS public.manga_character
(
    mangaid integer NOT NULL,
    characterid integer NOT NULL,
    CONSTRAINT manga_character_pkey PRIMARY KEY (mangaid, characterid)
);

CREATE TABLE IF NOT EXISTS public.manga_contributor_type
(
    mangacontributortypeid serial NOT NULL,
    mangaid integer,
    manga_contributor_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    type_label character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT manga_contributor_type_pkey PRIMARY KEY (mangacontributortypeid)
);

CREATE TABLE IF NOT EXISTS public.manga_genre
(
    mangaid integer NOT NULL,
    genreid integer NOT NULL,
    CONSTRAINT manga_genre_pkey PRIMARY KEY (mangaid, genreid)
);

CREATE TABLE IF NOT EXISTS public.manga_rating_review
(
    mangaratingid serial NOT NULL,
    userid integer NOT NULL,
    mangaid integer NOT NULL,
    rating_score integer NOT NULL,
    rating_date date DEFAULT CURRENT_DATE,
    review text COLLATE pg_catalog."default",
    CONSTRAINT manga_rating_review_pkey PRIMARY KEY (mangaratingid)
);

CREATE TABLE IF NOT EXISTS public.manga_revision_history_table
(
    mangarevisionhistorytableid serial NOT NULL,
    userid integer NOT NULL,
    mangaid integer NOT NULL,
    updated_field character varying(100) COLLATE pg_catalog."default" NOT NULL,
    change_description character varying(255) COLLATE pg_catalog."default",
    change_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    old_value character varying(255) COLLATE pg_catalog."default",
    new_value character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT manga_revision_history_table_pkey PRIMARY KEY (mangarevisionhistorytableid)
);

CREATE TABLE IF NOT EXISTS public.manga_tags
(
    mangaid integer NOT NULL,
    tagid integer NOT NULL,
    CONSTRAINT manga_tags_pkey PRIMARY KEY (mangaid, tagid)
);

CREATE TABLE IF NOT EXISTS public.premiered_season_year
(
    premieredseasonyearid serial NOT NULL,
    season premiered_season_year_enum NOT NULL,
    year integer NOT NULL,
    CONSTRAINT premiered_season_year_pkey PRIMARY KEY (premieredseasonyearid)
);

CREATE TABLE IF NOT EXISTS public.release_frequency
(
    releasefrequencyid integer NOT NULL DEFAULT nextval('release_schedule_releasescheduleid_seq'::regclass),
    release_type character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT release_schedule_pkey PRIMARY KEY (releasefrequencyid)
);

CREATE TABLE IF NOT EXISTS public.season
(
    seasonid serial NOT NULL,
    animeid integer NOT NULL,
    season_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    number_of_episodes integer,
    season_synopsis text COLLATE pg_catalog."default",
    CONSTRAINT season_pkey PRIMARY KEY (seasonid)
);

CREATE TABLE IF NOT EXISTS public.song
(
    songid serial NOT NULL,
    animeid integer,
    songtypeid integer,
    song_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    song_number integer,
    song_duration interval,
    performer_composer character varying(150) COLLATE pg_catalog."default",
    has_lyrics boolean DEFAULT false,
    song_source_url character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT song_pkey PRIMARY KEY (songid)
);

CREATE TABLE IF NOT EXISTS public.song_type
(
    songtypeid serial NOT NULL,
    type_label character varying(50) COLLATE pg_catalog."default" NOT NULL,
    version_label character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT song_type_pkey PRIMARY KEY (songtypeid)
);

CREATE TABLE IF NOT EXISTS public.tags
(
    tagid serial NOT NULL,
    tag_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tags_pkey PRIMARY KEY (tagid)
);

CREATE TABLE IF NOT EXISTS public.user_readlist
(
    readlistid serial NOT NULL,
    userid integer NOT NULL,
    mangaid integer NOT NULL,
    status_label character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT user_readlist_pkey PRIMARY KEY (readlistid)
);

CREATE TABLE IF NOT EXISTS public.user_watchlist
(
    userwatchlistid serial NOT NULL,
    userid integer NOT NULL,
    animeid integer NOT NULL,
    status character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT user_watchlist_pkey PRIMARY KEY (userwatchlistid)
);

CREATE TABLE IF NOT EXISTS public.voice_actor
(
    voiceactorid serial NOT NULL,
    characterid integer NOT NULL,
    voice_actor_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT voice_actor_pkey PRIMARY KEY (voiceactorid)
);

CREATE TABLE IF NOT EXISTS public.weebyomiuri_user
(
    userid serial NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    username character varying(100) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default",
    security_token text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT weebyomiuri_user_pkey PRIMARY KEY (userid),
    CONSTRAINT weebyomiuri_user_email_key UNIQUE (email),
    CONSTRAINT weebyomiuri_user_username_key UNIQUE (username)
);

ALTER TABLE IF EXISTS public.admin
    ADD CONSTRAINT admin_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.weebyomiuri_user (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.anime
    ADD CONSTRAINT anime_animelanguageoptionsid_fkey FOREIGN KEY (animelanguageoptionsid)
    REFERENCES public.language_option (languageoptionid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.anime
    ADD CONSTRAINT anime_animemangaorigincountryid_fkey FOREIGN KEY (animemangaorigincountryid)
    REFERENCES public.anime_manga_origin_country (animemangaorigincountryid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.anime
    ADD CONSTRAINT anime_animemangastatusid_fkey FOREIGN KEY (animemangastatusid)
    REFERENCES public.anime_manga_status (animemangastatusid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.anime
    ADD CONSTRAINT anime_animemangatypeid_fkey FOREIGN KEY (animemangatypeid)
    REFERENCES public.anime_manga_type (animemangatypeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.anime
    ADD CONSTRAINT anime_premieredseasonyearid_fkey FOREIGN KEY (premieredseasonyearid)
    REFERENCES public.premiered_season_year (premieredseasonyearid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.anime_character
    ADD CONSTRAINT anime_character_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_character
    ADD CONSTRAINT anime_character_characterid_fkey FOREIGN KEY (characterid)
    REFERENCES public."character" (characterid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_contributor_type
    ADD CONSTRAINT anime_contributor_type_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_genre
    ADD CONSTRAINT anime_genre_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_genre
    ADD CONSTRAINT anime_genre_genreid_fkey FOREIGN KEY (genreid)
    REFERENCES public.genre (genreid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_language_option
    ADD CONSTRAINT anime_language_option_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_language_option
    ADD CONSTRAINT anime_language_option_languageoptionid_fkey FOREIGN KEY (languageoptionid)
    REFERENCES public.language_option (languageoptionid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_manga_association
    ADD CONSTRAINT anime_manga_association_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_manga_association
    ADD CONSTRAINT anime_manga_association_mangaid_fkey FOREIGN KEY (mangaid)
    REFERENCES public.manga (mangaid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_rating_review
    ADD CONSTRAINT anime_rating_review_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_rating_review
    ADD CONSTRAINT anime_rating_review_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.weebyomiuri_user (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_revision_history_table
    ADD CONSTRAINT anime_revision_history_table_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_revision_history_table
    ADD CONSTRAINT anime_revision_history_table_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.weebyomiuri_user (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_tags
    ADD CONSTRAINT anime_tag_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.anime_tags
    ADD CONSTRAINT anime_tag_tagid_fkey FOREIGN KEY (tagid)
    REFERENCES public.tags (tagid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.chapter
    ADD CONSTRAINT chapter_mangaid_fkey FOREIGN KEY (mangaid)
    REFERENCES public.manga (mangaid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.database_activity_logs
    ADD CONSTRAINT database_activity_logs_adminid_fkey FOREIGN KEY (adminid)
    REFERENCES public.admin (adminid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.episode
    ADD CONSTRAINT episode_seasonid_fkey FOREIGN KEY (seasonid)
    REFERENCES public.season (seasonid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga
    ADD CONSTRAINT manga_animemangaorigincountryid_fkey FOREIGN KEY (animemangaorigincountryid)
    REFERENCES public.anime_manga_origin_country (animemangaorigincountryid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.manga
    ADD CONSTRAINT manga_animemangastatusid_fkey FOREIGN KEY (animemangastatusid)
    REFERENCES public.anime_manga_status (animemangastatusid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.manga
    ADD CONSTRAINT manga_animemangatypeid_fkey FOREIGN KEY (animemangatypeid)
    REFERENCES public.anime_manga_type (animemangatypeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.manga
    ADD CONSTRAINT manga_releasescheduleid_fkey FOREIGN KEY (releasescheduleid)
    REFERENCES public.release_frequency (releasefrequencyid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.manga_character
    ADD CONSTRAINT manga_character_characterid_fkey FOREIGN KEY (characterid)
    REFERENCES public."character" (characterid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_character
    ADD CONSTRAINT manga_character_mangaid_fkey FOREIGN KEY (mangaid)
    REFERENCES public.manga (mangaid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_contributor_type
    ADD CONSTRAINT manga_contributor_type_mangaid_fkey FOREIGN KEY (mangaid)
    REFERENCES public.manga (mangaid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_genre
    ADD CONSTRAINT manga_genre_genreid_fkey FOREIGN KEY (genreid)
    REFERENCES public.genre (genreid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_genre
    ADD CONSTRAINT manga_genre_mangaid_fkey FOREIGN KEY (mangaid)
    REFERENCES public.manga (mangaid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_rating_review
    ADD CONSTRAINT manga_rating_review_mangaid_fkey FOREIGN KEY (mangaid)
    REFERENCES public.manga (mangaid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_rating_review
    ADD CONSTRAINT manga_rating_review_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.weebyomiuri_user (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_revision_history_table
    ADD CONSTRAINT manga_revision_history_table_mangaid_fkey FOREIGN KEY (mangaid)
    REFERENCES public.manga (mangaid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_revision_history_table
    ADD CONSTRAINT manga_revision_history_table_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.weebyomiuri_user (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_tags
    ADD CONSTRAINT manga_tags_mangaid_fkey FOREIGN KEY (mangaid)
    REFERENCES public.manga (mangaid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.manga_tags
    ADD CONSTRAINT manga_tags_tagid_fkey FOREIGN KEY (tagid)
    REFERENCES public.tags (tagid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.season
    ADD CONSTRAINT season_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.song
    ADD CONSTRAINT song_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.song
    ADD CONSTRAINT song_songtypeid_fkey FOREIGN KEY (songtypeid)
    REFERENCES public.song_type (songtypeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_readlist
    ADD CONSTRAINT user_readlist_mangaid_fkey FOREIGN KEY (mangaid)
    REFERENCES public.manga (mangaid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_readlist
    ADD CONSTRAINT user_readlist_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.weebyomiuri_user (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_watchlist
    ADD CONSTRAINT user_watchlist_animeid_fkey FOREIGN KEY (animeid)
    REFERENCES public.anime (animeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_watchlist
    ADD CONSTRAINT user_watchlist_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.weebyomiuri_user (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.voice_actor
    ADD CONSTRAINT voice_actor_characterid_fkey FOREIGN KEY (characterid)
    REFERENCES public."character" (characterid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;